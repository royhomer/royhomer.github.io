<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 单例模式相关 | 罗宏的个人技术博客]]></title>
  <link href="http://royhomer.github.io/blog/categories/dan-li-mo-shi-xiang-guan/atom.xml" rel="self"/>
  <link href="http://royhomer.github.io/"/>
  <updated>2015-10-25T23:40:26+08:00</updated>
  <id>http://royhomer.github.io/</id>
  <author>
    <name><![CDATA[royhomer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[单例模式]]></title>
    <link href="http://royhomer.github.io/blog/2015/10/25/dan-li-mo-shi/"/>
    <updated>2015-10-25T19:13:20+08:00</updated>
    <id>http://royhomer.github.io/blog/2015/10/25/dan-li-mo-shi</id>
    <content type="html"><![CDATA[<blockquote><p>数学与逻辑学中，singleton定义为“有且仅有一个元素的集合”。
单例模式最初的定义出现于《设计模式》（艾迪生维斯理, 1994）：“保证一个类仅有一个实例，并提供一个访问它的全局访问点。”</p></blockquote>

<!--more-->


<h3>写在前面的话</h3>

<p>一开始我并不了解单例模式的应用场景。只是知道有这么一种设计模式，怎么去实现它。但是随着使用频率的上升。您就能体会到单例模式的好处，简单的说&mdash;-单例模式就是保证这个单例类的实例化的对象只有一份，不管怎么多次实例化对象，他得对象都是同一个。</p>

<h3>一步步实现iOS中单例的写法</h3>

<p>1 集成NSObject 实现一个单例类, 实现一个类方法。让这个方法返回的实例唯一。</p>

<pre><code>// 定义一个实例对象
id _mySingleton;

+ (instancetype)shareSingleton {
    // 如果不为空直接返回
    if (_mySingleton == nil) {
    _mySingleton = [[self alloc] init];
    }
    return _mySingleton;
}
</code></pre>

<p>如下图所示 : 不论调用多少次内存地址都一样。保证单例类的对象的唯一</p>

<p><img src="images/danlimoshidayin1.png" alt="" /></p>

<p>2 我们还得考虑多个线程 同时实例化的时候 所以需要加线程锁 且在最外面加一层判断</p>

<pre><code>// 定义一个实例对象
id _mySingleton;

+ (instancetype)shareSingleton {

    if (_mySingleton == nil) {// 防止多线程重复加锁
        @synchronized(self) { // 加线程锁
            if (_mySingleton == nil) { // 防止重复实例化
             _mySingleton = [[self alloc] init];
            }
        }
    }
return _mySingleton;
}
</code></pre>

<p>3 为了保证 全局对象 _mySingleton的唯一性 加static修饰</p>

<pre><code>// static 修饰全局变量 全局变量的作用域只在当前类
static id _mySingleton;
</code></pre>

<p>4 但是当使用copy 或 alloc 实例化对象的时候就会发生对象地址改变，实例化对象不唯一现象，解决办法就是重写allocWithZone 和 copyWithZone<code>注意这里必须要实现&lt;NSCopying&gt;协议才能打出来</code> 一下就是完整版的单例类实现</p>

<pre><code>// 定义一个实例对象
static id _mySingleton;
+ (instancetype)shareSingleton {

    if (_mySingleton == nil) {// 防止多线程重复加锁
        @synchronized(self) { // 加线程锁
            if (_mySingleton == nil) { // 防止重复实例化
                _mySingleton = [[self alloc] init];
            }
        }
     }
return _mySingleton;
}

// 重写allocWithZone 调用父类的方法
+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    if (_mySingleton == nil) {
        @synchronized(self) {
            if (_mySingleton == nil) {
                _mySingleton = [super allocWithZone:zone];
            }
        }
    }
    return _mySingleton;
}
// 重写copyWithZone
- (id)copyWithZone:(NSZone *)zone {
    return _mySingleton;
}
</code></pre>

<h3>懒汉式单例和饿汉式单例&ndash; 推荐大家使用懒汉式</h3>

<p>上面我们提到这种实现方式就是懒汉式 用到的时候加载</p>

<p>饿汉式实现方式主要思路是程序加载到内存时候进行创建</p>

<pre><code>// 定义一个实例对象
static id _mySingleton;

+ (void)load {
    _mySingleton = [[self alloc] init];
}

+ (instancetype)shareSingleton {
    return _mySingleton;
}

+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    if (_mySingleton == nil) {
        _mySingleton = [super allocWithZone:zone];
    }
    return _mySingleton;
}

- (id)copyWithZone:(NSZone *)zone {
    return _mySingleton;
}
</code></pre>

<h3>MRC实现单例的时候防止对象被释放重写一下三个方法</h3>

<pre><code>- (oneway void)release {
// 什么也不写
}

- (id)retain {
    return self;
}   

- (NSUInteger)retainCount {
    return 1;
}
</code></pre>

<h3>用GCD得方式实现单例类</h3>

<pre><code>// 定义一个实例对象
static id _mySingleton;
+ (instancetype)shareSingleton {

    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _mySingleton = [[self alloc] init];
    });

return _mySingleton;
}

// 重写allocWithZone 调用父类的方法
+ (instancetype)allocWithZone:(struct _NSZone *)zone {

    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _mySingleton = [super allocWithZone:zone];
    });

    return _mySingleton;
}

// 重写copyWithZone
- (id)copyWithZone:(NSZone *)zone {
    return _mySingleton;
}
</code></pre>

<h3>用宏实现快捷单例类</h3>

<pre><code>#define Single(name) \
\
static id _my##name;\
+ (instancetype)share##name {\
\
    static dispatch_once_t onceToken;\
    dispatch_once(&amp;onceToken, ^{\
        _my##name = [[self alloc] init];\
    });\
\
    return _my##name;\
}\
\
+ (instancetype)allocWithZone:(struct _NSZone *)zone {\
\
    static dispatch_once_t onceToken;\
    dispatch_once(&amp;onceToken, ^{\
        _my##name = [super allocWithZone:zone];\
    });\
    \
    return _my##name;\
}\
\
- (id)copyWithZone:(NSZone *)zone {\
    return _my##name;\
}
</code></pre>
]]></content>
  </entry>
  
</feed>
