<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Royhomer.luo Octopress Blog]]></title>
  <link href="http://royhomer.github.io/atom.xml" rel="self"/>
  <link href="http://royhomer.github.io/"/>
  <updated>2015-11-03T19:50:24+08:00</updated>
  <id>http://royhomer.github.io/</id>
  <author>
    <name><![CDATA[Royhomer.luo (罗宏)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[单例模式]]></title>
    <link href="http://royhomer.github.io/blog/2014/07/15/dan-li-mo-shi/"/>
    <updated>2014-07-15T19:13:20+08:00</updated>
    <id>http://royhomer.github.io/blog/2014/07/15/dan-li-mo-shi</id>
    <content type="html"><![CDATA[<!--more-->


<blockquote><p>数学与逻辑学中，singleton定义为“有且仅有一个元素的集合”。
单例模式最初的定义出现于《设计模式》（艾迪生维斯理, 1994）：“保证一个类仅有一个实例，并提供一个访问它的全局访问点。”</p></blockquote>

<h3>写在前面的话</h3>

<p>一开始我并不了解单例模式的应用场景。只是知道有这么一种设计模式，怎么去实现它。但是随着使用频率的上升。您就能体会到单例模式的好处，简单的说&mdash;-单例模式就是保证这个单例类的实例化的对象只有一份，不管怎么多次实例化对象，他得对象都是同一个。</p>

<h3>一步步实现iOS中单例的写法</h3>

<p>1 集成NSObject 实现一个单例类, 实现一个类方法。让这个方法返回的实例唯一。</p>

<pre><code>// 定义一个实例对象
id _mySingleton;

+ (instancetype)shareSingleton {
    // 如果不为空直接返回
    if (_mySingleton == nil) {
    _mySingleton = [[self alloc] init];
    }
    return _mySingleton;
}
</code></pre>

<p>如下图所示 : 不论调用多少次内存地址都一样。保证单例类的对象的唯一</p>

<p><img src="http://royhomer.github.io/images/2014/07/danlidayin1.png" alt="" /></p>

<p>2 我们还得考虑多个线程 同时实例化的时候 所以需要加线程锁 且在最外面加一层判断</p>

<pre><code>// 定义一个实例对象
id _mySingleton;

+ (instancetype)shareSingleton {

    if (_mySingleton == nil) {// 防止多线程重复加锁
        @synchronized(self) { // 加线程锁
            if (_mySingleton == nil) { // 防止重复实例化
             _mySingleton = [[self alloc] init];
            }
        }
    }
return _mySingleton;
}
</code></pre>

<p>3 为了保证 全局对象 _mySingleton的唯一性 加static修饰</p>

<pre><code>// static 修饰全局变量 全局变量的作用域只在当前类
static id _mySingleton;
</code></pre>

<p>4 但是当使用copy 或 alloc 实例化对象的时候就会发生对象地址改变，实例化对象不唯一现象，解决办法就是重写allocWithZone 和 copyWithZone<code>注意这里必须要实现&lt;NSCopying&gt;协议才能打出来</code> 一下就是完整版的单例类实现</p>

<pre><code>// 定义一个实例对象
static id _mySingleton;
+ (instancetype)shareSingleton {

    if (_mySingleton == nil) {// 防止多线程重复加锁
        @synchronized(self) { // 加线程锁
            if (_mySingleton == nil) { // 防止重复实例化
                _mySingleton = [[self alloc] init];
            }
        }
     }
return _mySingleton;
}

// 重写allocWithZone 调用父类的方法
+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    if (_mySingleton == nil) {
        @synchronized(self) {
            if (_mySingleton == nil) {
                _mySingleton = [super allocWithZone:zone];
            }
        }
    }
    return _mySingleton;
}
// 重写copyWithZone
- (id)copyWithZone:(NSZone *)zone {
    return _mySingleton;
}
</code></pre>

<h3>懒汉式单例和饿汉式单例&ndash; 推荐大家使用懒汉式</h3>

<p>上面我们提到这种实现方式就是懒汉式 用到的时候加载</p>

<p>饿汉式实现方式主要思路是程序加载到内存时候进行创建</p>

<pre><code>// 定义一个实例对象
static id _mySingleton;

+ (void)load {
    _mySingleton = [[self alloc] init];
}

+ (instancetype)shareSingleton {
    return _mySingleton;
}

+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    if (_mySingleton == nil) {
        _mySingleton = [super allocWithZone:zone];
    }
    return _mySingleton;
}

- (id)copyWithZone:(NSZone *)zone {
    return _mySingleton;
}
</code></pre>

<h3>MRC实现单例的时候防止对象被释放重写一下三个方法</h3>

<pre><code>- (oneway void)release {
// 什么也不写
}

- (id)retain {
    return self;
}   

- (NSUInteger)retainCount {
    return 1;
}
</code></pre>

<h3>用GCD得方式实现单例类</h3>

<pre><code>// 定义一个实例对象
static id _mySingleton;
+ (instancetype)shareSingleton {

    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _mySingleton = [[self alloc] init];
    });

return _mySingleton;
}

// 重写allocWithZone 调用父类的方法
+ (instancetype)allocWithZone:(struct _NSZone *)zone {

    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _mySingleton = [super allocWithZone:zone];
    });

    return _mySingleton;
}

// 重写copyWithZone
- (id)copyWithZone:(NSZone *)zone {
    return _mySingleton;
}
</code></pre>

<h3>用宏实现快捷单例类</h3>

<pre><code>#define Single(name) \
\
static id _my##name;\
+ (instancetype)share##name {\
\
    static dispatch_once_t onceToken;\
    dispatch_once(&amp;onceToken, ^{\
        _my##name = [[self alloc] init];\
    });\
\
    return _my##name;\
}\
\
+ (instancetype)allocWithZone:(struct _NSZone *)zone {\
\
    static dispatch_once_t onceToken;\
    dispatch_once(&amp;onceToken, ^{\
        _my##name = [super allocWithZone:zone];\
    });\
    \
    return _my##name;\
}\
\
- (id)copyWithZone:(NSZone *)zone {\
    return _my##name;\
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程基础03 NSOperation]]></title>
    <link href="http://royhomer.github.io/blog/2014/07/07/duo-xian-cheng-ji-3/"/>
    <updated>2014-07-07T12:56:07+08:00</updated>
    <id>http://royhomer.github.io/blog/2014/07/07/duo-xian-cheng-ji-3</id>
    <content type="html"><![CDATA[<!--more-->


<blockquote><p>NSOperation和GCD很类似</p></blockquote>

<h3>NSOperation的作用</h3>

<ul>
<li>配合使用NSOperation 和 NSOperationQueue也能实现多线程编程</li>
</ul>


<h3>NSOperation和NSOperationQueue实现多线程的具体步骤</h3>

<ul>
<li>现将需要执行的操作封住到一个NSOperation对象中</li>
<li>然后将NSoperation对象添加到NSOperationQueue中</li>
<li>系统会自动将NSOperationQueue中的NSOperation取出来</li>
<li>然后将NSOperation中封装的操作放到一个线程中执行</li>
</ul>


<h3>NSOperation是一个操作类它的的子类才有封装操作的能力</h3>

<ol>
<li>NSInvocationOperation</li>
<li>NSBlockOperation</li>
<li>自定义继承NSOperation的子类</li>
</ol>


<p>创建NSOperation 前两种种方式其实作用一样 只是一个Block 一个target调用</p>

<pre><code>NSInvocationOperation *operation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(操作的方法) object:nil];

NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
    // 要执行的任务或操作
}];
</code></pre>

<h4>队列的类型</h4>

<ol>
<li>主队列

<ul>
<li>[NSOperationQueue mainQueue];</li>
<li>添加到"主队列"中的操作,都会放到主线程中执行</li>
</ul>
</li>
<li>非主队列

<ul>
<li>[[NSOperationQueue alloc] init];</li>
<li>添加到"非主队列"中的操作,都会放到子线程中执行</li>
</ul>
</li>
</ol>


<h4>队列添加任务</h4>

<ul>
<li>-(void)addOperation:(NSOperation *)op;</li>
<li>-(void)addOperationWithBlock:(void(^)(void))block;</li>
</ul>


<h5>上代码</h5>

<p>情景一 、封装一个NSOperation操作, 直接调用start方法,</p>

<p>分析: 主线程 &ndash; 同步执行 &ndash; 不开启子线程</p>

<pre><code>NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
    // 要执行的任务或操作
}];
[operation start];
</code></pre>

<p>情景二 、封装一个NSOperation操作,往里添加多个block任务,</p>

<p>分析1: 第一个操作 : 主线程 &ndash; 异步执行 &ndash; 不开启子线程</p>

<p>分析2: 后添加的操作 : 子线程 &ndash; 异步执行 &ndash; 开启子线程</p>

<pre><code>NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
    // 要执行的任务或操作A
}];

[operation addExecutionBlock:^{
    // 要执行的任务或操作B
}];

[operation addExecutionBlock:^{
    // 要执行的任务或操作C
}];

[operation start];   
</code></pre>

<p>操作A在主线程, 操作B、C在子线程</p>

<p>情景三 、创建一个NSOperationQueue的队列 封装一个(或者多个)NSOperation操作</p>

<p>分析: 子线程 &ndash; 异步执行 &ndash; 开启子线程</p>

<pre><code>NSOperationQueue *queue = [[NSOperationQueue alloc] init];

NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
    // 要执行的任务或操作
}];

[queue addOperation:operation];
</code></pre>

<p>操作是在子线程异步执行</p>

<pre><code>NSOperationQueue *queue = [[NSOperationQueue alloc] init];

// 封装
NSBlockOperation *operationA = [NSBlockOperation blockOperationWithBlock:^{
    // 要执行的任务或操作A
}];

NSBlockOperation *operationB = [NSBlockOperation blockOperationWithBlock:^{
    // 要执行的任务或操作B
}];

[queue addOperation:operationA];
[queue addOperation:operationB];
[queue addOperationWithBlock:^{
   // 要执行的操作或任务C
}];
</code></pre>

<p>操作A、B、C是在子线程异步执行的</p>

<h4>常见的用法</h4>

<ol>
<li><p>设置最大并发数</p>

<ul>
<li>-(void)setMaxConcurrentOperationCount:(NSInteger)count;</li>
<li>(NSInteger)maxConcurrentOperationCount;</li>
</ul>
</li>
<li><p>队列其它操作</p>

<ul>
<li>取消所有操作 -(void)cancelAllOperations;</li>
<li>暂停所有操作 [queue setSuspended:YES];</li>
<li>恢复所有操作 [queue setSuspended:NO];</li>
</ul>
</li>
</ol>


<h4>操作之间的依赖</h4>

<ul>
<li>NSOperation之间可以设置依赖来保证执行顺序</li>
<li>[operationB addDependency:operationA];  &mdash; <code>等操作A执行完毕后才能执行操作B</code> （不能相互依赖）</li>
</ul>


<h4>线程之间的通讯</h4>

<pre><code>[queue addOperationWithBlock:^{
   // 要执行耗时操作

    [[NSOperationQueue mainQueue] addOperationWithBlock:^{
        // 回到主线程执行的操作
    }];
}];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程基础02 GCD]]></title>
    <link href="http://royhomer.github.io/blog/2014/07/05/duo-xian-cheng-ji-2/"/>
    <updated>2014-07-05T12:53:07+08:00</updated>
    <id>http://royhomer.github.io/blog/2014/07/05/duo-xian-cheng-ji-2</id>
    <content type="html"><![CDATA[<p>  <!--more--> <br/>
   了解完多线基础概念和NSTread的基本使用后，本文介绍GCD的主要用方法</p>

<p>   GCD全称 : Grand Central Dispatch  &ndash; <code>伟大的中枢调度器</code></p>

<hr />

<blockquote><p>CGD的优势: 多核并行运算提出解决方案，自动管理线程生命周期，自动利用更多的CPU内核</p></blockquote>

<h3>1 两大核心概念</h3>

<ul>
<li>任务 : 执行什么操作</li>
<li><p>队列 : 用来存放任务</p></li>
<li><p>一般使用步骤: 定制任务，将任务添加到队列，GCD会自动将队列中得任务取出，放到对应的线程中执行;任务取出顺序，遵循FIFO，先进先出，后进后出，</p></li>
</ul>


<h3>2 用来执行任务的两个函数</h3>

<p>同步执行</p>

<pre><code>dispatch_sync(dispatch_queue_t queue, ^(void)block)
</code></pre>

<p>异步执行</p>

<pre><code>dispatch_async(dispatch_queue_t queue, ^(void)block)
* 参数 queue 队列
* 参数 block 任务的代码块
</code></pre>

<ul>
<li>两者的区别

<ul>
<li>同步 : 不开启新线程</li>
<li>异步 : 会开启新线程</li>
</ul>
</li>
</ul>


<h3>3 队列的类型</h3>

<h4>GCD的队列分为两大类型</h4>

<p>并发队列 (Concurrent Dispatch Queue) : <code>多个任务并发（同时）执行</code> (自动开启多个线程同时执行),只有在异步函数下有效</p>

<pre><code>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)
</code></pre>

<p>  参数1 : 队列优先级<br/>
  参数2 : 默认 0</p>

<p>串行队列 (Serial Dispatch Queue) : 一个任务执行完成再接着执行下一个</p>

<pre><code>dispatch_queue_t queue = dispatch_queue_create("C语言的字符串-队列标识", NULL);
</code></pre>

<h3>4 四种情况分析</h3>

<h5>1. 异步执行 全局并发队列 添加5个任务</h5>

<ul>
<li>分析 <code>常用这种方式</code>

<ul>
<li>会不会创建线程 : 会创建5条子线程</li>
<li>任务的执行方式 : 并发执行</li>
</ul>
</li>
</ul>


<h5>2. 异步执行 串行队列 添加5个任务</h5>

<ul>
<li>分析 <code>偶尔常用这种方式</code>

<ul>
<li>会不会创建线程 : 会创建1条子线程（不论添加多少个任务都只开启一条）</li>
<li>任务的执行方式 : 顺序执行</li>
</ul>
</li>
</ul>


<h5>3. 同步执行 全局并发队列 添加5个任务</h5>

<ul>
<li>分析 <code>不常用</code>

<ul>
<li>会不会创建线程 : 不会开启新的子线程</li>
<li>任务的执行方式 : 顺序执行，（因为只有一条线程所以只能顺序执行）</li>
</ul>
</li>
</ul>


<h5>4. 同步执行 串行队列 添加5个任务</h5>

<ul>
<li>分析 <code>不常用</code>

<ul>
<li>会不会创建线程 : 不会开启新的子线程</li>
<li>任务的执行方式 : 顺序执行</li>
</ul>
</li>
</ul>


<h5>5. 特殊情况 &ndash; 异步执行 串行主队列 添加5个任务</h5>

<pre><code>// 获取主队列  这个也是一个串行队列
dispatch_queue_t queue = dispatch_get_main_queue();
</code></pre>

<ul>
<li>分析

<ul>
<li>会不会创建线程 : 不会开启新的线程 因为主队列对应的线程就是主线程,主线程只能有一个</li>
<li>任务的执行方式 : 顺序执行</li>
</ul>
</li>
</ul>


<h3>5 GCD线程之间的通信</h3>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

    // 耗时操作

    dispatch_async(dispatch_get_main_queue(), ^{

        // 主线程刷新UI

    });
});
</code></pre>

<h3>6 延迟执行</h3>

<p>1 下面这种方式会卡住主线程</p>

<pre><code>[NSThread sleepForTimeInterval:2];
</code></pre>

<p>2 下面这种方式不会卡住主线程,但是不能改变延迟后代码执行的线程</p>

<pre><code>[self performSelector:@selector(download:) withObject:@"下载中" afterDelay:2];```
</code></pre>

<p>3 这种GCD的方式，比较好，不卡住主线程，也能随意定制延迟后代码执行的线程</p>

<pre><code>dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(“时间” * NSEC_PER_SEC)), dispatch_get_main_queue()(这个队列可以改成全局队列), ^{
    // 延迟后要执行的代码
    });
</code></pre>

<h3>7 一次执行</h3>

<p>一次性执行的代码主要用来创建单例模式</p>

<pre><code>static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    // 只执行一次的代码
});
</code></pre>

<h3>8 队列组</h3>

<p>队列组的功能主要是，当多个任务需要同时执行，且所有任务都执行完毕后，还要触发执行别的任务的时候用到。</p>

<pre><code>//获取队列组
dispatch_group_t group = dispatch_group_create();

//队列组添加异步执行任务
dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_group_async(group, queue, ^{
   // 任务1代码 
});
.
添加多个任务
.
dispatch_group_async(group, queue, ^{
   // 任务n代码 
});
.
dispatch_group_notify(group, queue, ^{
    // 所有任务执行完后唤醒需要执行的代码        
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程基础01 概念和NSThread]]></title>
    <link href="http://royhomer.github.io/blog/2014/07/04/duo-xian-cheng-ji-1/"/>
    <updated>2014-07-04T12:21:39+08:00</updated>
    <id>http://royhomer.github.io/blog/2014/07/04/duo-xian-cheng-ji-1</id>
    <content type="html"><![CDATA[<!-- more-->


<p>   在软件开发中必不可少的会接触到一个词语&ndash;多线程；
   那么什么是多线呢，本文主要是对多线程的基础知识做简单讲解。</p>

<hr />

<h2>1 基本概念</h2>

<h4>1.1 进程的概念</h4>

<ul>
<li><p>进程是指在系统正在运行的一个应用程序，每个进程是相对独立</p>

<p>  eg: 当我们启动QQ，那么就会开启一个进程</p></li>
</ul>


<h4>1.2 线程的概念</h4>

<ul>
<li>每个进程中至少要有一条线程。（一个程序的所有任务都是在线程中执行的）</li>
<li>一个线程中任务的执行是<code>串行的</code></li>
</ul>


<h4>1.3 多线程的概念</h4>

<ul>
<li>一个进程中可以开多条线程，每条线程可以并行（同时）执行

<ul>
<li>主线程 : 自动创建的，默认的 又叫UI线程</li>
<li>子线程 : 又叫后台线程</li>
</ul>
</li>
</ul>


<h6>多线程原理</h6>

<ul>
<li>CPU同一时间只能有一条线程在工作，其实是CPU快速的在多条线程之间调度（切换）；调度频率快，就形成了多线程同时执行的“假象”。所以移动端不建议开太多线程一般在5条以内</li>
</ul>


<h6>多线程优缺点</h6>

<ul>
<li>优点：能适当提高执行效率、资源（CPU，内存）利用率</li>
<li>缺点：开启线程占用内存，开销大，性能降低</li>
</ul>


<h6>多线程在iOS开发中的应用</h6>

<ul>
<li>默认有一条主线程（UI线程）有且只有一条。作用：负责显示和刷新界面，处理UI事件</li>
<li><code>注意</code>：不要把耗时操作放在主线程中</li>
</ul>


<h2>2 iOS中多线程的实现方案</h2>

<p><img src="http://royhomer.github.io/images/2014/07/duoxianchengjichu.png" alt="" /></p>

<h2>3 pthread的例子</h2>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    
    // 创建一个线程标识符
    pthread_t myrestrict;
    
    // 1param 线程标识符变量的地址, 2param 写NULL 3param 执行的的函数 4param NULL
    pthread_create(&amp;myrestrict, NULL, run, NULL);
}

// 定义线程的函数
void *run(void *data) {
    
    NSLog(@"%@", [NSThread currentThread]);
    
    return nil;
}
</code></pre>

<h2>4 NSThread的基本用法</h2>

<h4>创建方式1 创建后需启动</h4>

<pre><code>    //创建线程
    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(download) object:nil];
    // 启动线程
   [thread start];
 
</code></pre>

<h4>创建方式2  创建后自动启动</h4>

<pre><code>    // 创建后直接启动  传一个字符串
    [NSThread detachNewThreadSelector:@selector(download2:) toTarget:self withObject:@"param"];
    
</code></pre>

<h4>创建方式3  隐式启动</h4>

<pre><code>    // 开启子线程
    [self performSelectorInBackground:@selector(download) withObject:nil];
    // 开启主线程
    [self performSelector:@selector(download) withObject:nil];
    // 开启传入的线程
    [self performSelector:@selector(download) onThread:[NSThread currentThread] withObject:nil waitUntilDone:NO];
</code></pre>

<h4>其它常用方法</h4>

<pre><code>    // 获取当前线程
    NSThread *current = [NSThread currentThread];
    // 获取主线程
    NSThread *main = [NSThread mainThread];
    // 判断是否主线程-类方法
    BOOL isMain = [NSThread isMainThread];
    // 判断是否主线程-对象方法
    BOOL isMain2 = [main isMainThread];
    // 给线程起名字
    current.name = @"下载线程";
    // 线程睡眠状态5秒
    [NSThread sleepForTimeInterval:5.0];
    // 线程睡眠从现在开始3秒以后的时间
    [NSThread sleepUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]];
    // 线程退出 线程进入死亡状态
    [NSThread exit];
</code></pre>

<h4>线程之间的通信</h4>

<pre><code>[self performSelectorOnMainThread:@selector(method) withObject:nil waitUntilDone:YES];

[self performSelector:@selector(method) onThread:[NSThread mainThread] withObject:nil waitUntilDone:YES];
</code></pre>

<ul>
<li>waitUntilDone: 是否等待执行完   performSelector:执行的方法  withObject: 传参数</li>
</ul>


<h2>5.线程安全</h2>

<ul>
<li><p>线程安全</p>

<ul>
<li>概念 : 多个线程夺取同一个资源，访问一个变量</li>
<li>解决方案 : 加锁&ndash;线程锁, 互斥锁</li>
<li>互斥锁的格式 : <code>@synchronized(self) { // 插入锁定代码 }</code></li>
<li><code>注意</code> : 一份代码只能用一个锁, 多个锁无效</li>
</ul>
</li>
<li><p>线程锁优缺点</p>

<ul>
<li>优点 : 能够有效防止因多线程抢夺资源造成的数据安全问题</li>
<li>缺点 : 消耗大量CPU资源</li>
</ul>
</li>
<li><p>线程同步</p>

<ul>
<li>多条线程在同一条线上执行（按顺序执行）</li>
<li>互斥锁就运用了线程同步</li>
</ul>
</li>
<li><p>原子属性和非原子属性</p>

<ul>
<li>atomic 会自动为setter方法加锁</li>
<li>nonatomic 不会为setter方法  推荐使用这个</li>
</ul>
</li>
</ul>


<h2>6.多线程状态示意图</h2>

<h5>在了解完线程安全后咱们再看看完整的线程状态示意图</h5>

<p><img src="http://royhomer.github.io/images/2014/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="" /></p>

<p>   </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建一个github博客基于Octopress]]></title>
    <link href="http://royhomer.github.io/blog/2014/07/03/zen-yang-da-jian-gitbubpagebo-ke/"/>
    <updated>2014-07-03T17:10:04+08:00</updated>
    <id>http://royhomer.github.io/blog/2014/07/03/zen-yang-da-jian-gitbubpagebo-ke</id>
    <content type="html"><![CDATA[<!--more-->


<h3>准备工作</h3>

<p>确保安装了git和ruby1.9.3,通过brew安装rbenv然后用rbenv安装ruby。</p>

<h5>1.安装 rbenv</h5>

<pre><code>brew update
brew install rbenv
brew install ruby-build
rbenv rehash
</code></pre>

<h5>2.安装 octopress</h5>

<p>从GitHub上clone源码：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    
</code></pre>

<p>接着安装依赖项(dependencies)：</p>

<pre><code>gem install bundler
rbenv rehash    
bundle install
rake install
</code></pre>

<h5>3.部署博客</h5>

<pre><code>rake setup_github_pages
</code></pre>

<h5>4.输入你的github地址</h5>

<pre><code>git@github.com:your_username/your_username.github.com
</code></pre>

<h5>5.下来就可以生成静态网页，并将其部署到github上了，只需如下两句：</h5>

<pre><code>rake generate    #生成静态网页
rake deploy   #发布网页
</code></pre>

<p>等待几分钟后，网页就已经部署好了，你可以访问你的域名查看自己的博客了。然后可以将源码添加到github中进行管理，你仓库中有两个分支，master分支是静态网页，source分支则是你的生成网页的源码，这样在另一台电脑上你可以clone你的仓库，很容易的进行你的博客编写。</p>

<pre><code>git add .
git commit -m 'init'
git push origin source
</code></pre>

<p>现在就可以进行文章的编写了，编写文章使用markdown语法，十分便捷，语法简单，可参见markdown语法说明。输入如下命令：</p>

<h5>6.写文章</h5>

<pre><code>rake new_post['title']
</code></pre>

<p>在~/blog/source/_posts下回生成一个名为YYYY-MM-DD-title.markdown的文件，在这个文件中编写你的文章即可。编写完成后依然按上边发布网页的方法发布即可：</p>

<pre><code>rake generate    #生成静态网页
rake deploy   #发布网页
</code></pre>

<p>或者也可以生成静态网页后，在本机进行预览</p>

<pre><code>rake preview
</code></pre>

<p>然后可以通过<code>http://localhost:4000</code>访问，状态满意即可发布网页，以上几步同样适用于更改网页布局、样式等，重新发布网页。</p>

<h3>octopress博客的个性化配置</h3>

<h6>添加文章分类（category)</h6>

<p>1、增加category_list插件
首先，保存以下内容到<code>`plugins/category_list_tag.rb</code>中（如果文件不存在就新创建一个）：</p>

<pre><code>module Jekyll
    class CategoryListTag &lt; Liquid::Tag
        def render(context)
            html = ""
            categories = context.registers[:site].categories.keys
            categories.sort.each do |category|
                posts_in_category = context.registers[:site].categories[category].size
                category_dir = context.registers[:site].config['category_dir']
                category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
                # html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://royhomer.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
             html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://royhomer.github.io/blog/categories/#{category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
            end
            html
        end
    end
end

Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</code></pre>

<p>2、再增加aside，复制以下代码到source/_includes/asides/category_list.html（如果没有就新建）:</p>

<pre><code>&lt;section&gt;
    &lt;h1&gt;文章分类&lt;/h1&gt;
    &lt;ul id="categories"&gt;
    &lt;li class='category'&gt;&lt;a href='http://royhomer.github.io/blog/categories/octopressbo-ke-da-jian/'&gt;octopress博客搭建 (1)&lt;/a&gt;&lt;/li&gt;
</code></pre>

<p><li class='category'><a href='http://royhomer.github.io/blog/categories/dan-li-mo-shi-xiang-guan/'>单例模式相关 (1)</a></li>
<li class='category'><a href='http://royhomer.github.io/blog/categories/duo-xian-cheng/'>多线程 (3)</a></li></p>

<pre><code>    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>3、更改<code>_config.yml</code>文件，让侧边栏链接到刚才新增加的<code>source/_includes/asides/category_list.html</code>文件：</p>

<pre><code>default_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]
</code></pre>

<p>完成以上步骤后，重新部署就能看到博客的右侧边栏增加了category列表了。</p>

<h6>自定义Navigation</h6>

<p>默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。</p>

<p>1、首先编辑文件<code>/source/_includes/custom/navigation.html</code>，仿照Blog和Archives的写法增加一行About：</p>

<pre><code>&lt;ul class="main-navigation"&gt;
    &lt;li&gt;&lt;a href="http://royhomer.github.io/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://royhomer.github.io/about"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>2、然后使用命令：</p>

<pre><code>rake new_page['about']
</code></pre>

<p>创建一个页面，保存路径为<code>source\about\index.markdown</code></p>

<p>编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。</p>

<h4>参考文章：</h4>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a></p>

<p><a href="http://812lcl.com/blog/2013/10/25/octopressbo-ke-da-jian-ji-mu-lu-jie-gou/">Octopress博客搭建及目录结构</a></p>

<p><a href="http://812lcl.com/blog/2013/10/27/octopresszhu-ti-yang-shi-xiu-gai/">Octopress主题样式修改</a></p>

<p><a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>
]]></content>
  </entry>
  
</feed>
